Problem Statement
Given 2 non-negative integers m and n, find gcd(m, n)
GCD of 2 integers m and n is defined as the greatest integer g such that g is a divisor of both m and n. Both m and n fit in a 32 bit signed integer.

NOTE: DO NOT USE LIBRARY FUNCTIONS
Input
Input contains two space separated integers, m and n

Constraints:-
1 < = m, n < = 10^18
Output
Output the single integer denoting the gcd of the above integers.
Example
Sample Input:
6 9

Sample Output:
3

Sample Input:-
5 6

Sample Output:-
1

import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main (String[] args) {
                      // Your code here
                     /* Scanner scanner = new scanner(System.in);
                      long m = scanner.nextInt();
                      long n = scanner.nextInt();
                      
                      long Solution=gcd(long m, long n) ;
    //Euclid's algorithm
    while(B!=0)
    {
        long r = m%n;
        m = n;
        n = r;
    }
    return m;*/
     Scanner sc = new Scanner(System.in) ;
    long m = sc.nextLong() ;
    long n = sc.nextLong() ;

    System.out.print(gcd(m,n)) ;
    }

    public static long gcd(long m ,long n) {
        if (m%n == 0) {
            return n ;
        }
        return gcd(n , m%n) ;

    }
}