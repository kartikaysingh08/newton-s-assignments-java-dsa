Problem Statement
How many ways are there to place a black and a white knight on an N * M chessboard such that they do not attack each other? The knights have to be placed on different squares. A knight can move two squares horizontally and one square vertically (L shaped), or two squares vertically and one square horizontally (L shaped). The knights attack each other if one can reach the other in one move




#include<bits/stdc++.h>
using namespace std;

long long numOfWays(int n, int m);

int main() {

    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        cout << numOfWays(n, m) << endl;
    }
    return 0;
}


long long numOfWays(int N, int M)
{
    long long ans=0;
    long long k=N*M;
    int mod=1000000007;
    for(int i=0;i<N;i++){
        for(int j=0;j<M;j++){
            int c=0;
            if(j+2<M&&i+1<N)
                 c++;
            if(j+2<M&&i-1>=0)
                 c++;
            if(i+2<N&&j+1<M)
                  c++;
            if(i+2<N&&j-1>=0)
                 c++;
             if(j-2>=0&&i+1<N)
                 c++;
            if(j-2>=0&&i-1>=0)
                 c++;
            if(i-2>=0&&j+1<M)
                  c++;
            if(i-2>=0&&j-1>=0)
                 c++;
            ans=((ans+k)%mod-(c+1)%mod+mod)%mod;
        }
    }
    return ans;
}